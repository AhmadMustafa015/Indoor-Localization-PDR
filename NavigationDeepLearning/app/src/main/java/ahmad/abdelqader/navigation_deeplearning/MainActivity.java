package ahmad.abdelqader.navigation_deeplearning;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.renderscript.Matrix3f;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.util.TimingLogger;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.res.ResourcesCompat;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Queue;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import org.apache.commons.math3.complex.Quaternion;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import ahmad.abdelqader.navigation_deeplearning.extra.ExtraFunctions;
import ahmad.abdelqader.navigation_deeplearning.filewriting.DataFileWriter;
import ahmad.abdelqader.navigation_deeplearning.graph.ScatterPlot;


public class MainActivity extends AppCompatActivity implements SensorEventListener, TextToSpeech.OnInitListener {


    private static final int N_SAMPLES = 201;
    private static int prevIdx = -1;
    private float totalDistance = 0;

    private static List<Float> ax;
    private static List<Float> ay;
    private static List<Float> az;

    private static List<Float> tmpx;
    private static List<Float> tmpy;
    private static List<Float> tmpz;

    private static List<Float> mx;
    private static List<Float> my;
    private static List<Float> mz;

    private static List<Float> gx;
    private static List<Float> gy;
    private static List<Float> gz;

    private static List<Float> rx;
    private static List<Float> ry;
    private static List<Float> rz;
    private static List<Float> rqw;
    private static List<Float> rqx;
    private static List<Float> rqy;
    private static List<Float> rqz;

    private static List<Float> ma;
    private static List<Float> ml;
    private static List<Float> mg;
    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private Sensor mGyroscope;
    private Sensor mMagnetic;
    private Sensor mBodyAcc;
    private int stride = 10;
    private int stride_gyro = 0;
    private int stride_acc = 0;
    private boolean areFilesCreated = false;

    private boolean first_run = true;
    private TextView downstairsTextView;
    private TextView runningTextView;
    private TextView standingTextView;
    private TextView upstairsTextView;
    private TextView walkingTextView;
    private TextView elevatorTextView;
    private TextView fallingTextView;
    private TextView carTextView;
    private TextView accX;
    private TextView accY;
    private TextView accZ;
    private TextView linAccX;
    private TextView linAccY;
    private TextView linAccZ;
    private TextView gyroX;
    private TextView gyroY;
    private TextView gyroZ;
    private TextView totalD;
    /*private double[] test_accx = {-0.017952, -0.027148, -0.031338, -0.036506, -0.048127, -0.053606,
            -0.050261, -0.049125, -0.03839 , -0.018604, -0.00164 ,  0.009583,
            0.013078,  0.017175,  0.017697,  0.014611,  0.015999,  0.012192,
            0.005839,  0.002595, -0.003956, -0.002401,  0.002515,  0.00237 ,
            -0.000483, -0.002796, -0.007009, -0.011292, -0.015129, -0.020777,
            -0.027862, -0.027862, -0.027949, -0.012399, -0.012399, -0.001696,
            0.007401,  0.002656, -0.00971 , -0.027091, -0.04486 , -0.05512 ,
            -0.063766, -0.059651, -0.047288, -0.040844, -0.034077, -0.026033,
            -0.015395, -0.008125, -0.011448, -0.022718, -0.037773, -0.049388,
            -0.054531, -0.047947, -0.022697,  0.015781,  0.047566,  0.076475,
            0.088159,  0.078415,  0.053231,  0.011702, -0.019489, -0.029349,
            -0.016162,  0.008859,  0.030775,  0.035624,  0.023819,  0.006036,
            -0.012717, -0.020974, -0.021799, -0.004619,  0.01775 ,  0.040985,
            0.060777,  0.074946,  0.077954,  0.073449,  0.065335,  0.056961,
            0.052583,  0.049303,  0.04849 ,  0.04648 ,  0.047929,  0.050128,
            0.048017,  0.037956,  0.029389,  0.022456,  0.018205,  0.021707,
            0.0306  ,  0.043012,  0.055683,  0.062608,  0.072461,  0.079242,
            0.079508,  0.072884,  0.065847,  0.06111 ,  0.065943,  0.080856,
            0.09392 ,  0.096885,  0.10156 ,  0.097282,  0.087172,  0.079078,
            0.072222,  0.071579,  0.078217,  0.092037,  0.10049 ,  0.097759,
            0.090867,  0.077445,  0.058162,  0.032314, -0.003599, -0.034185,
            -0.0534  , -0.062847, -0.056129, -0.038762, -0.02646 , -0.02702 ,
            -0.034152, -0.038289, -0.042733, -0.044189, -0.046834, -0.041411,
            -0.037736, -0.043989, -0.060257, -0.074146, -0.087006, -0.092948,
            -0.094148, -0.083946, -0.068353, -0.053907, -0.045842, -0.04348 ,
            -0.03373 , -0.023053, -0.014839, -0.000783, -0.000227,  0.006035,
            0.008375,  0.007383,  0.008124,  0.007691,  0.005182,  0.002022,
            0.001378,  0.004948,  0.014081,  0.021842,  0.034104,  0.037923,
            0.030661,  0.012906, -0.022981, -0.063071, -0.083297, -0.10279 ,
            -0.11287 , -0.11166 , -0.099858, -0.07654 , -0.05487 , -0.036563,
            -0.02105 , -0.002067,  0.014752,  0.023623,  0.033892,  0.043303,
            0.049961,  0.056672,  0.061107,  0.058015,  0.054415,  0.052632,
            0.043421,  0.043055,  0.050597,  0.066148,  0.084951,  0.09981 ,
            0.10545 ,  0.10152 ,  0.088749,  0.063823,  0.045764,  0.045657,
            0.048729,  0.054021,  0.055927,  0.057044,  0.064422,  0.067117,
            0.062365,  0.063788,  0.069693,  0.081393,  0.093331,  0.10217 ,
            0.11405 ,  0.12226 ,  0.11965 ,  0.10793 ,  0.099467,  0.093959,
            0.092658,  0.098451,  0.10932 ,  0.11833 ,  0.11994 ,  0.11438 ,
            0.10509 ,  0.095037,  0.086867,  0.083006,  0.079473,  0.086183,
            0.098739,  0.10973 ,  0.12004 ,  0.125   ,  0.13003 ,  0.12462 ,
            0.12501 ,  0.12535 ,  0.12825 ,  0.12649 ,  0.12617 ,  0.13067 ,
            0.13136 ,  0.13361 ,  0.13942 ,  0.14534 ,  0.15414 ,  0.15429 ,
            0.15532 ,  0.15504 ,  0.14316 ,  0.1307  ,  0.12343 ,  0.12238 ,
            0.13252 ,  0.14897 ,  0.16562 ,  0.17718 ,  0.16149 ,  0.12151 ,
            0.085002,  0.056119,  0.032731,  0.008257, -0.008269, -0.023313,
            -0.029912, -0.022175, -0.007298,  0.008313,  0.019413,  0.027755,
            0.029441,  0.019571,  0.00078 , -0.019213, -0.036609, -0.052972,
            -0.062966, -0.067438, -0.067056, -0.055889, -0.037519, -0.024216,
            -0.005453,  0.010947,  0.015774,  0.007984, -0.004213, -0.02346 ,
            -0.035076, -0.03882 , -0.033861, -0.025251, -0.018132, -0.018586,
            -0.026425, -0.025978, -0.017247, -0.008742, -0.000763,  0.008462,
            0.00931 ,  0.002109,  0.001301, -0.000822, -0.00252 , -0.004414,
            -0.007997, -0.01137 , -0.014787, -0.018026, -0.018478, -0.013449,
            -0.009957, -0.008223, -0.010077, -0.015571, -0.011212, -0.01128 ,
            -0.011928, -0.008339, -0.005401, -0.001697,  0.000601, -0.001631,
            -0.005804, -0.013612, -0.02083 , -0.021544, -0.014893, -0.00375 ,
            0.006381,  0.01111 ,  0.01475 ,  0.025844,  0.033112,  0.032161,
            0.016972, -0.016638, -0.046129, -0.063037, -0.052668, -0.019276,
            0.026768,  0.053406,  0.059525,  0.054914,  0.04326 ,  0.031027,
            0.02175 ,  0.029391,  0.046681,  0.066156,  0.080884,  0.093617,
            0.097201,  0.095562,  0.082952,  0.076347,  0.073607,  0.069646,
            0.068612,  0.075148,  0.081499,  0.084654,  0.077087,  0.074321,
            0.072569,  0.070619,  0.071342,  0.078701,  0.080165,  0.082341,
            0.07806 ,  0.074766,  0.069848,  0.066119,  0.064017,  0.068154,
            0.065083,  0.063921,  0.064495,  0.061297,  0.059917,  0.068885,
            0.076322,  0.073806,  0.063721,  0.047099,  0.023098,  0.004108,
            -0.012935, -0.018901,  0.002616,  0.024801,  0.031173,  0.023214,
            0.004342, -0.023344, -0.050937, -0.079448, -0.10225 , -0.11704 ,
            -0.1103  , -0.086968, -0.065326, -0.047861, -0.029132, -0.012793,
            -0.012749, -0.015642, -0.027607, -0.04227 , -0.060589, -0.084811,
            -0.10674 , -0.12119 , -0.14121 , -0.14047 , -0.12476 , -0.094471,
            -0.05936 , -0.032538, -0.016852, -0.025559, -0.052487, -0.074247,
            -0.090351, -0.090815, -0.079206, -0.059241, -0.04636 , -0.032974,
            -0.038047, -0.053609, -0.064914, -0.069751, -0.072132, -0.063334,
            -0.048366, -0.031319, -0.020482, -0.019668, -0.024323, -0.027278,
            -0.033262, -0.03742 , -0.044485, -0.044004, -0.036418, -0.024586,
            -0.014678, -0.014611, -0.016715, -0.015029, -0.014113, -0.018227,
            -0.024933, -0.03227 , -0.034314, -0.039569, -0.044426, -0.039236,
            -0.023959,  0.005064,  0.040095,  0.072909,  0.08642 ,  0.08313 ,
            0.059345,  0.007977, -0.024584, -0.030694, -0.016815,  0.028236,
            0.068147,  0.078499,  0.069029,  0.035284, -0.005305, -0.031259,
            -0.039903, -0.027042, -0.013242, -0.008994, -0.005935, -0.007636,
            -0.008587, -0.005268,  0.002006,  0.010782,  0.015858,  0.023352,
            0.031246,  0.038129};
    private double[] test_accy = {1.0358e-01,  1.1275e-01,  1.1777e-01,  1.1901e-01,  1.1190e-01,
            1.0989e-01,  1.0895e-01,  1.0651e-01,  9.5077e-02,  7.8303e-02,
            5.9684e-02,  4.5107e-02,  3.5507e-02,  2.7401e-02,  1.6590e-02,
            2.9300e-04, -1.1091e-02, -2.2664e-02, -2.9726e-02, -2.2765e-02,
            -1.7086e-02, -1.3745e-02, -1.3399e-02, -2.0778e-02, -2.5182e-02,
            -2.4726e-02, -2.3637e-02, -2.1451e-02, -1.6623e-02, -8.9880e-03,
            -2.9980e-03, -2.9980e-03,  1.2000e-05, -1.7530e-03, -1.7530e-03,
            -7.7440e-03, -1.2677e-02, -2.2418e-02, -2.6665e-02, -2.1159e-02,
            -1.9327e-02, -2.1367e-02, -1.8807e-02, -2.0353e-02, -2.4918e-02,
            -3.0446e-02, -3.4980e-02, -3.8199e-02, -4.5867e-02, -5.1880e-02,
            -4.9345e-02, -4.0386e-02, -3.1577e-02, -2.5153e-02, -2.5345e-02,
            -2.5633e-02, -3.2056e-02, -4.7315e-02, -6.6654e-02, -8.5297e-02,
            -9.0346e-02, -7.1881e-02, -3.2050e-02,  2.7398e-02,  8.2715e-02,
            1.2326e-01,  1.4216e-01,  1.4632e-01,  1.4616e-01,  1.4928e-01,
            1.6670e-01,  1.8215e-01,  1.8913e-01,  1.8229e-01,  1.7287e-01,
            1.5941e-01,  1.4643e-01,  1.3792e-01,  1.3688e-01,  1.3577e-01,
            1.3957e-01,  1.4564e-01,  1.5106e-01,  1.5377e-01,  1.5228e-01,
            1.4933e-01,  1.4030e-01,  1.2724e-01,  1.1282e-01,  9.2546e-02,
            7.5779e-02,  6.3363e-02,  5.7821e-02,  5.2810e-02,  4.6622e-02,
            3.9231e-02,  2.5108e-02,  1.2092e-02,  9.1300e-04, -1.2094e-02,
            -2.2184e-02, -2.6157e-02, -2.9521e-02, -2.6492e-02, -2.2394e-02,
            -2.4078e-02, -3.1220e-02, -4.5607e-02, -5.9083e-02, -6.3577e-02,
            -6.5498e-02, -6.1407e-02, -5.0459e-02, -3.7848e-02, -2.1686e-02,
            -8.6960e-03, -7.9360e-03, -1.5777e-02, -2.3265e-02, -2.2693e-02,
            -1.1628e-02, -4.1760e-03, -2.2700e-03,  3.1790e-03,  1.4862e-02,
            3.9883e-02,  7.0730e-02,  9.7240e-02,  1.1679e-01,  1.2909e-01,
            1.3118e-01,  1.3486e-01,  1.4268e-01,  1.4996e-01,  1.4920e-01,
            1.3836e-01,  1.5343e-01,  1.2715e-01,  1.0677e-01,  1.0237e-01,
            9.8497e-02,  1.0124e-01,  1.0904e-01,  1.1557e-01,  1.2469e-01,
            1.2036e-01,  1.1074e-01,  9.9541e-02,  9.0884e-02,  7.3671e-02,
            5.3982e-02,  3.8128e-02,  1.8991e-02, -1.2150e-03,  9.9400e-04,
            -1.4578e-02, -2.0403e-02, -1.7503e-02, -1.3308e-02, -5.0290e-03,
            2.6500e-04,  1.4110e-03,  3.5870e-03,  2.8500e-03,  9.1100e-04,
            -1.8760e-03, -6.0600e-03, -1.2466e-02, -1.2949e-02, -7.7050e-03,
            7.8900e-03,  2.1577e-02,  1.6508e-02,  5.2290e-03, -4.6430e-03,
            -8.5220e-03, -1.7859e-02, -3.6618e-02, -5.4418e-02, -7.0924e-02,
            -8.4335e-02, -9.4083e-02, -9.9934e-02, -1.0192e-01, -9.4836e-02,
            -8.1080e-02, -6.9312e-02, -5.6951e-02, -4.4252e-02, -3.2190e-02,
            -2.3888e-02, -1.1070e-02,  3.8700e-04,  4.8400e-04, -1.4955e-02,
            -3.8334e-02, -5.7303e-02, -6.7639e-02, -6.9568e-02, -5.9053e-02,
            -3.2401e-02,  3.4440e-03,  3.3327e-02,  5.5889e-02,  7.6647e-02,
            1.0052e-01,  1.2343e-01,  1.4181e-01,  1.6101e-01,  1.7918e-01,
            1.9485e-01,  2.0368e-01,  2.0065e-01,  1.9322e-01,  1.8439e-01,
            1.7399e-01,  1.6481e-01,  1.6102e-01,  1.6459e-01,  1.7365e-01,
            1.8313e-01,  1.8951e-01,  1.9087e-01,  1.8460e-01,  1.7572e-01,
            1.6992e-01,  1.5576e-01,  1.4245e-01,  1.3047e-01,  1.1720e-01,
            1.0930e-01,  1.0474e-01,  1.0552e-01,  1.0432e-01,  1.0085e-01,
            9.6741e-02,  8.8458e-02,  7.8299e-02,  6.5562e-02,  5.1930e-02,
            4.0617e-02,  3.1924e-02,  2.7123e-02,  2.5320e-02,  2.5512e-02,
            2.6322e-02,  2.5519e-02,  2.2289e-02,  1.8199e-02,  1.1289e-02,
            4.2540e-03,  2.1720e-03,  9.7800e-04, -2.6080e-03,  5.4800e-04,
            6.7670e-03,  1.3663e-02,  1.6526e-02,  1.3189e-02,  1.1791e-02,
            1.2330e-02,  1.9244e-02,  3.3734e-02,  5.3804e-02,  6.0510e-02,
            6.2432e-02,  6.7608e-02,  8.1627e-02,  9.6249e-02,  1.1358e-01,
            1.2337e-01,  1.2229e-01,  1.0874e-01,  8.8171e-02,  7.1465e-02,
            5.9616e-02,  5.5680e-02,  6.2825e-02,  7.0152e-02,  7.5998e-02,
            8.4848e-02,  9.4221e-02,  1.0549e-01,  1.1810e-01,  1.3159e-01,
            1.4695e-01,  1.5381e-01,  1.4894e-01,  1.3676e-01,  1.1804e-01,
            9.5327e-02,  8.2922e-02,  7.7211e-02,  8.0119e-02,  8.8208e-02,
            8.8472e-02,  8.3354e-02,  7.8760e-02,  7.7802e-02,  8.0129e-02,
            8.2862e-02,  8.2750e-02,  7.8574e-02,  7.2239e-02,  6.5985e-02,
            5.9298e-02,  5.3039e-02,  5.0202e-02,  4.6078e-02,  4.0715e-02,
            3.8771e-02,  4.2836e-02,  4.6257e-02,  5.2856e-02,  4.7158e-02,
            3.6869e-02,  2.4614e-02,  1.2118e-02,  2.4360e-03, -4.7230e-03,
            -7.3330e-03, -5.8720e-03, -1.3892e-02, -2.1442e-02, -2.5748e-02,
            -2.7780e-02, -2.9865e-02, -3.1147e-02, -3.1279e-02, -2.9711e-02,
            -2.6327e-02, -2.0317e-02, -1.3266e-02, -1.6770e-03,  7.2760e-03,
            7.7010e-03,  2.7700e-03, -1.2694e-02, -3.1708e-02, -5.1593e-02,
            -7.0269e-02, -7.5425e-02, -6.2607e-02, -3.6123e-02,  3.0110e-03,
            4.0019e-02,  6.1229e-02,  7.8186e-02,  8.8520e-02,  1.0169e-01,
            1.1408e-01,  1.2799e-01,  1.3894e-01,  1.3218e-01,  1.2235e-01,
            1.1400e-01,  1.0070e-01,  8.6433e-02,  7.2236e-02,  6.2056e-02,
            6.1783e-02,  6.6027e-02,  7.9676e-02,  9.6015e-02,  1.0604e-01,
            1.1314e-01,  1.0942e-01,  9.9076e-02,  8.6034e-02,  7.7514e-02,
            6.9440e-02,  6.1494e-02,  5.2138e-02,  4.5064e-02,  3.7534e-02,
            2.6043e-02,  1.8462e-02,  1.1359e-02,  6.0110e-03, -4.5700e-04,
            -5.7910e-03, -9.7400e-03, -1.6178e-02, -2.2013e-02, -2.2455e-02,
            -2.7933e-02, -3.4683e-02, -4.0177e-02, -4.7651e-02, -6.0301e-02,
            -7.4571e-02, -8.2671e-02, -7.9451e-02, -6.6605e-02, -4.7142e-02,
            -1.7175e-02,  1.3520e-02,  2.7367e-02,  1.8741e-02,  7.0280e-03,
            2.0330e-03,  5.0380e-03,  2.1585e-02,  4.4595e-02,  5.5214e-02,
            5.9603e-02,  5.7046e-02,  5.8846e-02,  5.7256e-02,  5.7763e-02,
            6.7207e-02,  7.6849e-02,  8.1789e-02,  8.3142e-02,  8.1953e-02,
            7.7525e-02,  7.7209e-02,  7.6604e-02,  8.1776e-02,  9.2371e-02,
            1.0174e-01,  1.0635e-01,  1.1680e-01,  1.1723e-01,  1.1402e-01,
            1.0881e-01,  1.0179e-01,  8.8740e-02,  7.3104e-02,  6.3628e-02,
            5.2118e-02,  3.7122e-02,  2.8733e-02,  1.7108e-02,  4.3610e-03,
            -9.5890e-03, -1.9984e-02, -2.1672e-02, -1.9109e-02, -1.5983e-02,
            -8.3510e-03,  3.7380e-03,  1.1594e-02,  1.3160e-02,  9.5910e-03,
            2.9070e-03, -3.8620e-03, -9.2400e-03, -1.5003e-02, -1.7561e-02,
            -2.5230e-02, -3.5179e-02, -4.2040e-02, -4.6679e-02, -5.2212e-02,
            -5.8401e-02, -6.7296e-02, -7.1238e-02, -7.9609e-02, -9.2517e-02,
            -1.0545e-01, -1.0703e-01, -1.0236e-01, -9.2539e-02, -8.3198e-02,
            -7.3304e-02, -6.4101e-02, -5.7481e-02, -5.3303e-02, -5.3696e-02,
            -6.1112e-02, -6.7777e-02, -5.8731e-02, -3.5899e-02,  7.2770e-03,
            6.9644e-02,  1.1517e-01,  1.3803e-01,  1.4363e-01,  1.2961e-01,
            1.1889e-01,  1.2793e-01,  1.5092e-01,  1.7201e-01,  1.7970e-01,
            1.7630e-01,  1.5498e-01,  1.2592e-01,  1.0036e-01,  7.8379e-02,
            8.4513e-02,  9.1226e-02,  9.1805e-02,  1.1117e-01,  1.1922e-01,
            1.2598e-01,  1.3249e-01,  1.3053e-01,  1.1692e-01,  9.7793e-02};
    private double[] test_accz = { 2.4768e-02,  2.0635e-02,  7.4880e-03, -7.7380e-03, -1.3666e-02,
            -1.8081e-02, -1.6469e-02,  3.9870e-03,  3.0868e-02,  4.9134e-02,
            6.3317e-02,  6.5425e-02,  7.4793e-02,  8.3543e-02,  8.8471e-02,
            9.1279e-02,  9.0863e-02,  8.4102e-02,  7.4499e-02,  6.6771e-02,
            6.2164e-02,  5.1817e-02,  4.5832e-02,  4.8530e-02,  5.0260e-02,
            4.9303e-02,  4.8127e-02,  5.2840e-02,  5.7005e-02,  6.2433e-02,
            7.2517e-02,  7.2517e-02,  7.9139e-02,  7.3130e-02,  7.3130e-02,
            6.5440e-02,  5.9549e-02,  5.1289e-02,  4.2457e-02,  3.8495e-02,
            3.6064e-02,  2.9303e-02,  2.1870e-02,  1.1367e-02, -4.8360e-03,
            -1.1950e-02, -1.5430e-02, -2.0418e-02, -3.2935e-02, -4.6523e-02,
            -5.9432e-02, -6.8967e-02, -7.2328e-02, -7.9445e-02, -8.2924e-02,
            -7.6484e-02, -7.3661e-02, -6.8621e-02, -6.6876e-02, -7.6964e-02,
            -8.9589e-02, -1.1487e-01, -1.4700e-01, -1.4653e-01, -1.2778e-01,
            -1.0803e-01, -1.0034e-01, -1.0904e-01, -1.3641e-01, -1.4701e-01,
            -1.3562e-01, -1.1834e-01, -9.4650e-02, -6.3072e-02, -2.8178e-02,
            -1.2100e-04,  1.5176e-02,  2.4088e-02,  3.3575e-02,  3.7669e-02,
            4.5431e-02,  5.5685e-02,  6.1646e-02,  6.5477e-02,  6.5329e-02,
            5.7334e-02,  4.5942e-02,  4.3266e-02,  4.1545e-02,  3.3808e-02,
            2.4431e-02,  2.3688e-02,  2.3808e-02,  2.5042e-02,  2.4447e-02,
            2.9514e-02,  3.2827e-02,  3.7008e-02,  4.9371e-02,  5.8252e-02,
            6.0483e-02,  5.7632e-02,  5.2856e-02,  4.9186e-02,  4.6695e-02,
            4.2959e-02,  3.5361e-02,  1.8364e-02, -2.3430e-03, -2.6943e-02,
            -5.5863e-02, -7.5736e-02, -9.1240e-02, -1.0457e-01, -1.1607e-01,
            -1.2288e-01, -1.2530e-01, -1.3552e-01, -1.5781e-01, -1.8182e-01,
            -1.8900e-01, -1.9439e-01, -2.1115e-01, -2.1932e-01, -2.2056e-01,
            -2.2310e-01, -2.1554e-01, -1.9309e-01, -1.6557e-01, -1.5180e-01,
            -1.2826e-01, -9.7238e-02, -6.6415e-02, -3.4075e-02, -1.7600e-03,
            3.1429e-02,  5.0030e-02,  5.4757e-02,  5.6526e-02,  5.8679e-02,
            5.9534e-02,  5.1164e-02,  4.5905e-02,  4.1814e-02,  4.0203e-02,
            4.0698e-02,  3.9286e-02,  4.6438e-02,  6.4054e-02,  8.1243e-02,
            8.8021e-02,  9.4092e-02,  1.0042e-01,  1.0119e-01,  8.6010e-02,
            7.7542e-02,  7.2982e-02,  5.4254e-02,  4.1789e-02,  4.2610e-02,
            4.4060e-02,  4.9029e-02,  5.5695e-02,  5.7327e-02,  5.5572e-02,
            6.0111e-02,  5.6238e-02,  5.7088e-02,  6.2504e-02,  6.8807e-02,
            7.7382e-02,  9.0903e-02,  9.6176e-02,  7.9297e-02,  6.7326e-02,
            7.4164e-02,  8.4059e-02,  8.2655e-02,  7.9861e-02,  7.8855e-02,
            7.5399e-02,  6.6235e-02,  5.6814e-02,  4.2347e-02,  1.9716e-02,
            -3.9540e-03, -2.7385e-02, -5.6604e-02, -8.2437e-02, -9.8382e-02,
            -1.1467e-01, -1.2487e-01, -1.2554e-01, -1.2428e-01, -1.1980e-01,
            -1.1191e-01, -1.0773e-01, -1.1236e-01, -1.2072e-01, -1.4014e-01,
            -1.5821e-01, -1.5546e-01, -1.4125e-01, -1.4933e-01, -1.5795e-01,
            -1.6205e-01, -1.6135e-01, -1.6081e-01, -1.5973e-01, -1.4997e-01,
            -1.1595e-01, -7.4703e-02, -3.7569e-02, -8.5470e-03,  1.9579e-02,
            4.1976e-02,  5.4450e-02,  6.1425e-02,  7.1352e-02,  8.0394e-02,
            8.3203e-02,  8.0417e-02,  7.5752e-02,  6.5262e-02,  4.4545e-02,
            3.0181e-02,  2.1017e-02,  9.6400e-03,  4.6740e-03,  1.5000e-04,
            -3.0320e-03, -3.4990e-03, -2.1300e-03, -5.1380e-03, -1.2194e-02,
            -1.7402e-02, -1.9615e-02, -2.0311e-02, -2.1820e-02, -1.7523e-02,
            -1.0982e-02, -1.0607e-02, -1.1865e-02, -1.7806e-02, -1.6883e-02,
            -1.9633e-02, -2.4002e-02, -2.9217e-02, -3.6834e-02, -5.3016e-02,
            -7.2584e-02, -8.5223e-02, -9.7886e-02, -1.1720e-01, -1.3436e-01,
            -1.4342e-01, -1.5148e-01, -1.6157e-01, -1.6931e-01, -1.6963e-01,
            -1.7305e-01, -1.8017e-01, -1.7721e-01, -1.6655e-01, -1.5144e-01,
            -1.4486e-01, -1.4569e-01, -1.3556e-01, -1.2164e-01, -9.9095e-02,
            -6.1710e-02, -3.1420e-02, -1.7020e-02, -6.2300e-04,  1.7454e-02,
            1.5310e-02,  3.6410e-03, -2.7990e-03, -1.4726e-02, -4.3339e-02,
            -6.8032e-02, -7.7016e-02, -7.6660e-02, -6.9897e-02, -6.0790e-02,
            -4.6683e-02, -3.3979e-02, -1.7217e-02, -4.6390e-03,  2.6970e-03,
            1.3731e-02,  2.6020e-02,  3.3474e-02,  3.9969e-02,  4.7324e-02,
            4.9232e-02,  4.3413e-02,  3.5523e-02,  3.2677e-02,  4.3291e-02,
            6.0266e-02,  6.9992e-02,  7.3367e-02,  7.9256e-02,  8.6714e-02,
            8.5999e-02,  8.4535e-02,  8.9482e-02,  8.4975e-02,  8.3004e-02,
            8.0258e-02,  6.7390e-02,  5.6522e-02,  5.2842e-02,  4.8326e-02,
            4.7458e-02,  4.6948e-02,  5.3328e-02,  5.8913e-02,  5.9787e-02,
            5.9979e-02,  6.3220e-02,  5.3953e-02,  4.3710e-02,  3.6986e-02,
            2.6063e-02,  1.1032e-02, -4.4020e-03, -1.3424e-02, -1.8724e-02,
            -2.4367e-02, -2.9714e-02, -3.5996e-02, -4.1927e-02, -4.6320e-02,
            -4.8104e-02, -5.3423e-02, -5.9846e-02, -6.5383e-02, -8.0203e-02,
            -9.2646e-02, -1.1419e-01, -1.4418e-01, -1.5475e-01, -1.5531e-01,
            -1.4375e-01, -1.3689e-01, -1.4618e-01, -1.5301e-01, -1.5326e-01,
            -1.3713e-01, -1.1425e-01, -8.7712e-02, -5.7924e-02, -2.5271e-02,
            -1.4980e-03,  9.6400e-03,  8.7950e-03,  1.7638e-02,  2.3383e-02,
            2.1910e-02,  2.3118e-02,  2.9680e-02,  2.9272e-02,  2.9193e-02,
            3.2271e-02,  3.6353e-02,  3.3810e-02,  3.7785e-02,  4.4047e-02,
            5.5573e-02,  6.7493e-02,  7.5541e-02,  8.3112e-02,  8.7604e-02,
            8.7383e-02,  8.2544e-02,  8.4189e-02,  8.9382e-02,  8.9244e-02,
            8.0507e-02,  7.7923e-02,  7.6470e-02,  6.8383e-02,  6.1601e-02,
            5.7479e-02,  4.5899e-02,  3.7366e-02,  2.4734e-02, -2.8280e-03,
            -3.5828e-02, -7.0579e-02, -1.2492e-01, -1.7555e-01, -2.2156e-01,
            -2.5840e-01, -2.7582e-01, -2.7765e-01, -2.8999e-01, -2.9374e-01,
            -2.7769e-01, -2.4509e-01, -2.1142e-01, -1.7269e-01, -1.2555e-01,
            -8.0788e-02, -4.0599e-02, -1.1018e-02,  1.9490e-02,  2.9859e-02,
            3.7466e-02,  5.4022e-02,  6.1594e-02,  6.4865e-02,  7.1642e-02,
            7.4308e-02,  7.1863e-02,  5.9772e-02,  4.1608e-02,  2.2741e-02,
            1.2213e-02,  1.5220e-02,  2.8271e-02,  4.4485e-02,  5.3093e-02,
            5.6764e-02,  5.8423e-02,  5.0878e-02,  5.2706e-02,  6.1516e-02,
            7.1347e-02,  8.6918e-02,  1.0164e-01,  1.0610e-01,  1.0313e-01,
            9.1609e-02,  8.0589e-02,  6.6082e-02,  6.3736e-02,  6.2991e-02,
            6.2404e-02,  6.3800e-02,  6.5297e-02,  6.3756e-02,  5.5228e-02,
            5.3964e-02,  5.8495e-02,  6.6368e-02,  7.5833e-02,  8.0684e-02,
            8.4030e-02,  8.3052e-02,  8.3105e-02,  7.3738e-02,  5.9805e-02,
            4.4054e-02,  3.0624e-02,  2.4146e-02,  1.6271e-02, -3.2700e-04,
            -2.0242e-02, -4.3640e-02, -6.3582e-02, -8.4908e-02, -1.0456e-01,
            -1.0980e-01, -1.0823e-01, -1.1597e-01, -1.2298e-01, -1.1695e-01,
            -1.1249e-01, -1.1685e-01, -1.2867e-01, -1.5158e-01, -1.7931e-01,
            -1.7309e-01, -1.4238e-01, -1.1999e-01, -1.0517e-01, -1.0851e-01,
            -1.3583e-01, -1.3712e-01, -1.1393e-01, -8.6423e-02, -5.7488e-02,
            -2.3951e-02,  5.8500e-03,  2.1716e-02,  3.1293e-02,  4.3132e-02,
            4.9891e-02,  5.8367e-02,  7.6522e-02,  7.9727e-02,  7.4887e-02,
            6.8550e-02,  6.3806e-02,  5.9784e-02,  5.8051e-02,  4.6275e-02};
    private double[] test_gyrox = {-1.0119 , -1.3131 , -1.4971 , -1.4767 , -1.2734 , -0.79049,
            -0.14559,  0.39085,  0.63656,  0.5072 ,  0.39822,  0.397  ,
            0.36493,  0.2475 , -0.09281, -0.65584, -1.3039 , -1.7704 ,
            -1.8327 , -1.6097 , -1.2723 , -0.79867, -0.34667, -0.03086,
            0.1811 ,  0.25639,  0.52485,  0.63443,  0.70298,  0.77229,
            0.78839,  0.78839,  0.92993,  1.5607 ,  1.5607 ,  1.8929 ,
            2.1085 ,  2.0103 ,  1.7894 ,  1.5297 ,  1.2935 ,  1.1943 ,
            1.1453 ,  1.1891 ,  1.3599 ,  1.5394 ,  1.6532 ,  1.6169 ,
            1.5482 ,  1.5558 ,  1.8654 ,  2.3174 ,  2.8357 ,  3.5987 ,
            4.4433 ,  5.1031 ,  5.3764 ,  4.9542 ,  3.8688 ,  2.1733 ,
            -0.16067, -2.3809 , -3.7816 , -4.1851 , -3.7698 , -2.9779 ,
            -2.4511 , -2.091  , -1.6457 , -1.0767 , -0.60561, -0.32056,
            -0.26641, -0.51001, -0.94773, -1.8373 , -2.6359 , -3.2148 ,
            -3.5299 , -3.4937 , -3.1266 , -2.5664 , -1.9729 , -1.4427 ,
            -1.1041 , -0.87084, -0.73269, -0.86068, -1.2981 , -1.8213 ,
            -2.0758 , -2.21   , -2.1622 , -1.9223 , -1.6514 , -1.5112 ,
            -1.3831 , -1.1392 , -1.0888 , -0.95371, -0.90397, -0.85276,
            -0.70288, -0.41254, -0.07967,  0.04917, -0.01633, -0.37039,
            -0.92696, -1.4727 , -1.7605 , -1.7379 , -1.5005 , -0.85857,
            0.02737,  0.72901,  1.1059 ,  1.0096 ,  0.84975,  0.886  ,
            0.82965,  0.47924, -0.07949, -0.86715, -1.7039 , -2.0496 ,
            -1.7907 , -1.1126 , -0.15473,  1.0446 ,  2.1795 ,  3.157  ,
            3.8917 ,  4.3301 ,  4.4473 ,  3.6991 ,  2.3827 ,  0.77896,
            -0.94054, -2.2637 , -3.2545 , -3.6153 , -3.4304 , -2.8936 ,
            -2.1471 , -1.3081 , -0.1394 ,  0.91245,  1.7949 ,  2.2952 ,
            2.4344 ,  2.2975 ,  1.9039 ,  1.2217 ,  0.50925, -0.24666,
            -0.92803, -1.353  , -1.4998 , -1.4665 , -1.3267 , -1.0592 ,
            -0.75114, -0.28488,  0.13791,  0.34757,  0.30191,  0.19158,
            0.07007, -0.04011,  0.03334,  0.07494,  0.01973,  0.20068,
            0.84199,  1.2795 ,  1.4914 ,  1.3512 ,  0.88224,  0.13822,
            -0.76469, -1.4329 , -2.1769 , -2.5685 , -2.7148 , -2.5856 ,
            -2.2121 , -1.4995 , -0.4892 ,  0.68173,  2.068  ,  3.3179 ,
            4.2598 ,  4.7223 ,  4.7367 ,  4.3012 ,  3.4773 ,  2.3175 ,
            0.72003, -0.54204, -1.1689 , -1.3665 , -1.4586 , -1.4865 ,
            -1.4188 , -1.3735 , -1.2663 , -1.1939 , -0.79138,  0.14572,
            1.0507 ,  1.9767 ,  2.338  ,  2.359  ,  1.8994 ,  0.96887,
            0.12288, -0.77493, -1.328  , -1.805  , -1.9512 , -1.8231 ,
            -1.6343 , -1.2881 , -0.93247, -0.69308, -0.79118, -1.1952 ,
            -1.9799 , -2.8045 , -3.5212 , -3.9085 , -3.8832 , -3.6282 ,
            -2.8651 , -2.0933 , -1.4067 , -1.016  , -0.84536, -0.83402,
            -1.2045 , -1.5432 , -1.904  , -1.9672 , -1.7319 , -1.4552 ,
            -0.82686, -0.5195 , -0.22402, -0.11996,  0.01605,  0.16183,
            0.19112,  0.22364,  0.30216,  0.44706,  0.58078,  0.8281 ,
            1.0384 ,  0.7754 ,  0.19162, -0.65516, -1.4114 , -1.9394 ,
            -2.2851 , -2.3102 , -1.8659 , -1.0805 ,  0.08911,  1.4606 ,
            2.3808 ,  3.0822 ,  3.7378 ,  4.2099 ,  4.33   ,  4.1324 ,
            3.7357 ,  2.8087 ,  1.4059 , -0.04751, -1.1047 , -1.5003 ,
            -1.1104 ,  0.03214,  1.6397 ,  3.4335 ,  5.0332 ,  5.855  ,
            5.9856 ,  5.587  ,  4.978  ,  4.437  ,  4.06   ,  3.7057 ,
            3.1674 ,  2.5813 ,  1.9395 ,  1.543  ,  1.5961 ,  1.843  ,
            1.9828 ,  1.9931 ,  1.8629 ,  1.6988 ,  1.4378 ,  1.1903 ,
            0.79615,  0.30722, -0.04311, -0.09692,  0.12405,  0.81382,
            1.5264 ,  2.0064 ,  2.1139 ,  1.8914 ,  1.5091 ,  0.96756,
            0.50094,  0.07845, -0.1635 , -0.4286 , -0.56707, -0.65122,
            -0.71449, -0.77952, -0.85633, -0.82697, -0.67921, -0.50836,
            -0.30268, -0.06335,  0.33606,  0.99897,  1.9137 ,  2.739  ,
            3.5105 ,  3.9615 ,  3.9971 ,  3.4576 ,  2.079  ,  0.39708,
            -1.2879 , -2.4745 , -3.0201 , -3.2327 , -3.1489 , -2.7761 ,
            -2.0782 , -1.1016 , -0.05493,  0.85975,  1.694  ,  2.3707 ,
            2.6737 ,  2.388  ,  1.6529 ,  0.7465 , -0.40602, -1.5681 ,
            -2.462  , -2.8651 , -2.8527 , -2.4456 , -1.7835 , -1.1445 ,
            -0.56181, -0.09645,  0.28455,  0.48608,  0.52886,  0.32924,
            -0.04011, -0.55962, -1.1239 , -1.4869 , -1.5105 , -1.4266 ,
            -1.3953 , -1.395  , -1.2993 , -1.0648 , -0.93793, -0.59769,
            -0.37544, -0.22574, -0.10636, -0.19032, -0.54349, -0.96115,
            -1.5399 , -2.1396 , -2.5247 , -2.4903 , -1.7485 , -0.1957 ,
            1.5563 ,  2.8327 ,  3.4206 ,  3.5592 ,  3.2863 ,  2.6878 ,
            2.0317 ,  1.3594 ,  0.64859, -0.1867 , -0.66094, -0.96973,
            -0.82648, -0.06077,  1.0517 ,  2.1288 ,  2.9469 ,  3.4659 ,
            3.3786 ,  2.8573 ,  1.8069 ,  0.4218 , -1.1593 , -2.4368 ,
            -3.1248 , -3.0662 , -2.4791 , -1.5163 , -0.33802,  0.77891,
            1.7422 ,  2.6231 ,  3.1901 ,  3.5198 ,  3.5467 ,  3.3739 ,
            2.8484 ,  1.9675 ,  0.89028, -0.25338, -1.2252 , -1.9595 ,
            -2.3183 , -2.4084 , -2.0934 , -1.556  , -1.0552 , -0.74978,
            -0.42542, -0.16445,  0.18194,  0.4669 ,  0.60488,  0.54161,
            0.36304,  0.24855,  0.18548,  0.18394,  0.30762,  0.59147,
            0.90968,  1.0596 ,  0.88967,  0.59179,  0.37884,  0.36831,
            0.48536,  0.8705 ,  1.5353 ,  2.1912 ,  2.6109 ,  2.9547 ,
            3.3173 ,  3.4292 ,  3.0117 ,  2.0143 ,  0.34678, -1.323  ,
            -2.2646 , -2.3648 , -1.9741 , -1.3895 , -1.4478 , -2.0797 ,
            -2.5504 , -2.4624 , -1.9622 , -1.1141 , -0.19943,  0.32009,
            0.09127, -0.8006 , -2.0018 , -3.5114 , -4.4238 , -4.8675 ,
            -4.7708 , -4.187  , -3.1153 , -1.7258 , -0.29398,  0.83825,
            1.4159 ,  1.4841};
    private double[] test_gyroy = {3.018  ,  2.8497 ,  2.6805 ,  2.6695 ,  2.6993 ,  2.8874 ,
            3.3405 ,  3.6452 ,  3.6961 ,  3.5692 ,  3.3569 ,  3.2503 ,
            3.2719 ,  3.3367 ,  3.5418 ,  3.8874 ,  4.3083 ,  4.7064 ,
            5.0051 ,  4.9605 ,  4.4782 ,  3.707  ,  2.8934 ,  2.3261 ,
            2.0156 ,  2.0045 ,  2.2473 ,  2.747  ,  3.4815 ,  4.2693 ,
            4.9086 ,  4.9086 ,  5.1101 ,  3.752  ,  3.752  ,  2.6303 ,
            1.6056 ,  1.2338 ,  1.4172 ,  2.0591 ,  2.9565 ,  3.8099 ,
            4.3432 ,  4.5452 ,  4.65   ,  4.5418 ,  4.1997 ,  3.731  ,
            3.2412 ,  3.0171 ,  3.2168 ,  3.8841 ,  4.8279 ,  5.727  ,
            6.1459 ,  6.0125 ,  5.52   ,  4.7775 ,  3.8168 ,  2.6585 ,
            1.6547 ,  1.4068 ,  2.1965 ,  3.6705 ,  4.8926 ,  5.2376 ,
            4.434  ,  2.7155 ,  0.85797, -0.36109, -0.54548,  0.14525,
            1.4663 ,  2.9709 ,  4.1575 ,  4.8258 ,  4.8327 ,  4.3369 ,
            3.5936 ,  2.8792 ,  2.3111 ,  1.8798 ,  1.5337 ,  1.135  ,
            0.61039,  0.22519, -0.0101 , -0.10478, -0.16501, -0.12892,
            -0.00947,  0.29044,  0.57834,  0.8859 ,  1.1079 ,  1.1497 ,
            1.1274 ,  1.0616 ,  0.82655,  0.42043, -0.07008, -0.4104 ,
            -0.4328 , -0.16876,  0.16937,  0.39263,  0.30775,  0.08685,
            -0.20681, -0.41453, -0.35894, -0.07161,  0.38444,  0.71995,
            0.91487,  0.77027,  0.021  , -1.2464 , -2.609  , -3.5787 ,
            -4.1214 , -4.0437 , -3.2611 , -1.8052 , -0.06084,  1.5307 ,
            2.7015 ,  3.0802 ,  2.7408 ,  2.0594 ,  1.4317 ,  1.0717 ,
            0.99091,  1.2216 ,  1.3482 ,  1.3222 ,  1.013  ,  0.73826,
            0.66693,  0.78417,  1.0905 ,  1.4652 ,  1.9432 ,  2.3437 ,
            2.3056 ,  1.818  ,  1.1797 ,  0.6489 ,  0.25801,  0.04089,
            -0.01334,  0.10518,  0.16187,  0.17824,  0.39756,  0.60624,
            0.78236,  0.97771,  1.2882 ,  1.5967 ,  1.9043 ,  2.2107 ,
            2.208  ,  2.0227 ,  1.7312 ,  1.484  ,  1.3884 ,  1.2928 ,
            1.1866 ,  1.1761 ,  1.2922 ,  1.2704 ,  1.0045 ,  0.75822,
            0.59328,  0.32374, -0.1464 , -0.56045, -0.69478, -0.59233,
            -0.30748,  0.14566,  0.58853,  1.0924 ,  1.5517 ,  1.7743 ,
            1.8351 ,  1.733  ,  1.6073 ,  1.5226 ,  1.6706 ,  2.065  ,
            2.6536 ,  3.3846 ,  4.0661 ,  4.5063 ,  4.3955 ,  3.5205 ,
            2.3512 ,  1.5524 ,  1.4943 ,  1.8693 ,  2.339  ,  2.9252 ,
            3.5105 ,  4.0107 ,  4.2439 ,  4.062  ,  3.8346 ,  3.7627 ,
            3.7123 ,  3.5872 ,  3.4776 ,  3.4773 ,  3.3958 ,  3.169  ,
            2.8987 ,  2.8738 ,  3.2192 ,  3.7556 ,  4.2682 ,  4.3628 ,
            3.9564 ,  3.0587 ,  1.9585 ,  1.0085 ,  0.58336,  0.65081,
            1.1583 ,  1.9539 ,  2.8978 ,  3.7217 ,  4.1585 ,  4.0178 ,
            3.4254 ,  2.6304 ,  1.8361 ,  1.332  ,  1.3093 ,  1.5227 ,
            1.8774 ,  2.168  ,  2.4054 ,  2.6407 ,  2.8091 ,  2.8811 ,
            2.8544 ,  2.6602 ,  2.1996 ,  1.7301 ,  1.2816 ,  0.82236,
            0.50241,  0.61927,  1.0662 ,  1.7472 ,  2.3856 ,  2.586  ,
            2.1901 ,  1.2865 ,  0.27911, -0.18283,  0.15344,  1.0951 ,
            2.1418 ,  3.2073 ,  4.2051 ,  5.1148 ,  6.0109 ,  6.7774 ,
            7.2172 ,  7.1257 ,  6.6829 ,  5.8795 ,  4.9088 ,  4.0156 ,
            3.4866 ,  3.3562 ,  3.7838 ,  4.7123 ,  6.0102 ,  7.274  ,
            8.2555 ,  8.6482 ,  8.3562 ,  7.2643 ,  5.812  ,  4.3878 ,
            3.2782 ,  2.8443 ,  2.9021 ,  3.4708 ,  4.4009 ,  5.363  ,
            5.9751 ,  5.9375 ,  5.5594 ,  5.1687 ,  5.0725 ,  5.2942 ,
            5.4954 ,  5.5697 ,  5.432  ,  4.9963 ,  4.4017 ,  4.0842 ,
            4.045  ,  4.1771 ,  4.4037 ,  4.4785 ,  4.2527 ,  3.8845 ,
            3.591  ,  3.4487 ,  3.4054 ,  3.4607 ,  3.5813 ,  3.8522 ,
            4.1864 ,  4.6483 ,  4.9914 ,  5.1216 ,  5.1228 ,  5.2195 ,
            5.2308 ,  5.0077 ,  4.6355 ,  4.1986 ,  3.9311 ,  3.9616 ,
            4.418  ,  5.1404 ,  5.8934 ,  6.3031 ,  6.1993 ,  5.5208 ,
            4.6087 ,  3.4225 ,  2.1974 ,  1.0516 ,  0.38163,  0.56647,
            1.7848 ,  3.9688 ,  6.3285 ,  7.7688 ,  7.6082 ,  6.2198 ,
            4.1892 ,  2.3056 ,  1.1779 ,  0.87193,  1.2591 ,  1.914  ,
            2.423  ,  2.5535 ,  2.4534 ,  2.2375 ,  2.0343 ,  1.959  ,
            2.1902 ,  2.5238 ,  2.8114 ,  2.9999 ,  2.9946 ,  2.7018 ,
            2.1005 ,  1.4362 ,  0.94308,  0.72841,  0.78159,  1.103  ,
            1.5324 ,  1.8565 ,  1.9253 ,  1.8218 ,  1.6413 ,  1.5339 ,
            1.5016 ,  1.5655 ,  1.6184 ,  1.5845 ,  1.3917 ,  1.1972 ,
            0.99349,  0.98169,  1.1407 ,  1.2481 ,  1.1024 ,  0.82891,
            0.39695, -0.04539, -0.32966, -0.29753,  0.02734,  0.43065,
            0.48054, -0.21163, -1.5589 , -3.0516 , -4.1358 , -4.6736 ,
            -4.3905 , -3.2764 , -1.438  ,  0.92374,  3.1332 ,  4.6381 ,
            5.2011 ,  4.9177 ,  4.0027 ,  2.6405 ,  0.93933, -0.73816,
            -2.1443 , -3.2058 , -3.8471 , -3.793  , -2.9378 , -1.3606 ,
            0.74412,  2.9907 ,  4.7435 ,  5.4382 ,  4.9379 ,  3.2981 ,
            0.93534, -1.1606 , -2.3799 , -2.4147 , -1.5521 , -0.37909,
            0.62688,  1.0606 ,  0.92064,  0.38707,  0.04381,  0.14586,
            0.72411,  1.5984 ,  2.4481 ,  2.9973 ,  2.993  ,  2.5748 ,
            1.8687 ,  1.2375 ,  0.7441 ,  0.58154,  0.69727,  0.93191,
            1.4552 ,  2.0206 ,  2.3192 ,  2.1592 ,  1.6679 ,  1.2072 ,
            1.0659 ,  1.2031 ,  1.4919 ,  1.8456 ,  2.1666 ,  2.3688 ,
            2.3891 ,  2.4606 ,  2.775  ,  3.3132 ,  3.7467 ,  4.0847 ,
            4.2094 ,  3.7712 ,  2.5593 ,  0.85148, -0.8398 , -1.6995 ,
            -1.0305 ,  0.77172,  2.7614 ,  3.8435 ,  3.4065 ,  1.909  ,
            0.42107, -0.63451, -0.83038, -0.29372,  0.50889,  1.187  ,
            1.5731 ,  1.8047 ,  2.0496 ,  2.3397 ,  2.7418 ,  3.1719 ,
            3.3096 ,  3.0488 ,  2.4643 ,  1.5576 ,  0.5121 , -0.75448,
            -2.1016 , -3.2099};
    private double[] test_gyroz = {4.2795e+00,  4.5035e+00,  4.7489e+00,  4.9198e+00,  4.7921e+00,
            4.5364e+00,  4.3126e+00,  4.2063e+00,  4.1960e+00,  4.2600e+00,
            4.3776e+00,  4.4525e+00,  4.4951e+00,  4.6122e+00,  4.7180e+00,
            4.7805e+00,  4.9067e+00,  4.9692e+00,  5.0860e+00,  5.2359e+00,
            5.2693e+00,  5.3462e+00,  5.4018e+00,  5.3500e+00,  5.1801e+00,
            5.0415e+00,  5.0842e+00,  5.3077e+00,  5.6161e+00,  5.8176e+00,
            5.7525e+00,  5.7525e+00,  5.5068e+00,  5.2328e+00,  5.2328e+00,
            5.2887e+00,  5.3549e+00,  5.2380e+00,  4.9597e+00,  4.6380e+00,
            4.3265e+00,  4.1861e+00,  4.1744e+00,  4.2702e+00,  4.4625e+00,
            4.6765e+00,  4.8374e+00,  4.9449e+00,  5.1165e+00,  5.3624e+00,
            5.6507e+00,  5.9386e+00,  6.2260e+00,  6.5673e+00,  6.8882e+00,
            7.0284e+00,  7.0618e+00,  7.0837e+00,  7.1155e+00,  7.2107e+00,
            7.2084e+00,  7.0022e+00,  6.7422e+00,  6.5681e+00,  6.5560e+00,
            6.6315e+00,  6.6659e+00,  6.5948e+00,  6.3213e+00,  5.7481e+00,
            5.1302e+00,  4.7025e+00,  4.5188e+00,  4.4303e+00,  4.2460e+00,
            3.9764e+00,  3.6762e+00,  3.4305e+00,  3.3779e+00,  3.5394e+00,
            3.8826e+00,  4.2472e+00,  4.5050e+00,  4.5280e+00,  4.2520e+00,
            3.9222e+00,  3.6560e+00,  3.4958e+00,  3.3991e+00,  3.3661e+00,
            3.2373e+00,  2.8203e+00,  2.2542e+00,  1.6243e+00,  1.1440e+00,
            8.9867e-01,  8.4556e-01,  9.8468e-01,  1.1987e+00,  1.2743e+00,
            1.2112e+00,  1.0514e+00,  9.1296e-01,  8.8097e-01,  9.9837e-01,
            1.1687e+00,  1.3288e+00,  1.3713e+00,  1.2534e+00,  1.1671e+00,
            1.2198e+00,  1.4115e+00,  1.6032e+00,  1.7959e+00,  2.0319e+00,
            2.3109e+00,  2.5477e+00,  2.7206e+00,  2.6373e+00,  2.3722e+00,
            2.1062e+00,  1.8920e+00,  1.7936e+00,  1.6082e+00,  1.0380e+00,
            1.5928e-01, -6.6424e-01, -1.2615e+00, -1.4832e+00, -1.2985e+00,
            -9.6450e-01, -7.2734e-01, -5.4447e-01, -3.8400e-01, -1.3852e-01,
            9.5060e-02,  4.1354e-01,  6.3540e-01,  8.6738e-01,  1.0784e+00,
            1.2896e+00,  1.4807e+00,  1.5336e+00,  1.5124e+00,  1.5245e+00,
            1.4844e+00,  1.4555e+00,  1.4903e+00,  1.4925e+00,  1.3764e+00,
            1.1953e+00,  1.0240e+00,  8.6313e-01,  7.6585e-01,  7.1080e-01,
            7.1979e-01,  7.0763e-01,  6.6385e-01,  6.8433e-01,  9.0800e-01,
            1.1959e+00,  1.5267e+00,  1.8261e+00,  2.1688e+00,  2.5009e+00,
            2.8540e+00,  3.3129e+00,  3.8893e+00,  4.5510e+00,  5.2340e+00,
            5.7036e+00,  5.8852e+00,  5.8322e+00,  5.5234e+00,  5.1087e+00,
            4.6616e+00,  4.2145e+00,  3.8521e+00,  3.5313e+00,  3.1242e+00,
            2.7805e+00,  2.7039e+00,  2.8512e+00,  3.0205e+00,  3.1475e+00,
            3.2647e+00,  3.3507e+00,  3.6296e+00,  4.0477e+00,  4.4555e+00,
            4.8526e+00,  5.1636e+00,  5.5057e+00,  5.9322e+00,  6.2726e+00,
            6.5913e+00,  6.8783e+00,  6.9952e+00,  6.6636e+00,  6.0010e+00,
            5.3703e+00,  4.9530e+00,  4.8559e+00,  4.9616e+00,  5.1742e+00,
            5.4402e+00,  5.6748e+00,  5.8567e+00,  6.0713e+00,  6.3186e+00,
            6.6191e+00,  6.8771e+00,  6.9847e+00,  7.0594e+00,  7.0908e+00,
            7.1856e+00,  7.3768e+00,  7.6528e+00,  7.8647e+00,  8.0871e+00,
            8.2781e+00,  8.4169e+00,  8.4179e+00,  8.1639e+00,  7.8249e+00,
            7.5068e+00,  7.2405e+00,  7.0476e+00,  6.8745e+00,  6.6262e+00,
            6.3778e+00,  6.1728e+00,  6.0760e+00,  6.0767e+00,  6.1325e+00,
            6.2526e+00,  6.3619e+00,  6.3635e+00,  6.3425e+00,  6.3419e+00,
            6.3193e+00,  6.2434e+00,  6.2317e+00,  6.2950e+00,  6.4659e+00,
            6.7118e+00,  6.9051e+00,  6.9592e+00,  6.8752e+00,  6.6520e+00,
            6.4716e+00,  6.4192e+00,  6.4519e+00,  6.5371e+00,  6.4831e+00,
            6.3327e+00,  6.2144e+00,  6.1504e+00,  6.1408e+00,  6.0779e+00,
            5.9933e+00,  6.0353e+00,  6.3216e+00,  6.7353e+00,  7.1171e+00,
            7.4461e+00,  7.6693e+00,  7.8185e+00,  7.9150e+00,  7.9801e+00,
            8.1623e+00,  8.5693e+00,  9.0409e+00,  9.3634e+00,  9.3973e+00,
            9.0890e+00,  8.6196e+00,  8.1592e+00,  7.7291e+00,  7.5541e+00,
            7.6674e+00,  7.9383e+00,  8.3976e+00,  8.8542e+00,  9.1117e+00,
            9.2330e+00,  9.1948e+00,  8.9954e+00,  8.8478e+00,  8.9223e+00,
            9.1877e+00,  9.4631e+00,  9.5355e+00,  9.3838e+00,  9.1896e+00,
            8.9752e+00,  8.7079e+00,  8.4197e+00,  8.3132e+00,  8.3666e+00,
            8.4733e+00,  8.6653e+00,  8.8895e+00,  9.0074e+00,  9.0400e+00,
            8.9441e+00,  8.7620e+00,  8.6008e+00,  8.6104e+00,  8.8237e+00,
            9.0807e+00,  9.2426e+00,  9.2230e+00,  9.0320e+00,  8.7974e+00,
            8.5728e+00,  8.3904e+00,  8.3143e+00,  8.2809e+00,  8.1619e+00,
            8.0221e+00,  7.9040e+00,  7.8611e+00,  7.7754e+00,  7.6472e+00,
            7.4980e+00,  7.3277e+00,  7.1578e+00,  7.0518e+00,  7.0734e+00,
            7.2117e+00,  7.4456e+00,  7.7225e+00,  8.0965e+00,  8.4933e+00,
            8.7948e+00,  8.8190e+00,  8.4803e+00,  7.9382e+00,  7.2988e+00,
            6.6785e+00,  6.2056e+00,  5.8697e+00,  5.5329e+00,  5.3250e+00,
            5.3327e+00,  5.3972e+00,  5.4430e+00,  5.5759e+00,  5.6983e+00,
            5.7876e+00,  5.8751e+00,  6.0893e+00,  6.2388e+00,  6.1744e+00,
            5.8962e+00,  5.5108e+00,  5.0720e+00,  4.6968e+00,  4.3960e+00,
            4.3087e+00,  4.3608e+00,  4.4030e+00,  4.3607e+00,  4.2337e+00,
            4.0112e+00,  3.7678e+00,  3.5243e+00,  3.3551e+00,  3.2490e+00,
            3.1423e+00,  3.0346e+00,  2.9051e+00,  2.7649e+00,  2.6250e+00,
            2.5072e+00,  2.5286e+00,  2.6570e+00,  2.7532e+00,  2.7851e+00,
            2.8384e+00,  2.8282e+00,  2.7540e+00,  2.6802e+00,  2.6274e+00,
            2.5423e+00,  2.3927e+00,  2.2857e+00,  2.1997e+00,  2.0714e+00,
            1.9110e+00,  1.6439e+00,  1.3876e+00,  9.6062e-01,  3.4224e-01,
            -1.5746e-01, -5.2810e-01, -8.3422e-01, -1.0763e+00, -1.3190e+00,
            -1.8085e+00, -2.4704e+00, -3.0911e+00, -3.4358e+00, -3.4402e+00,
            -3.3177e+00, -3.0983e+00, -2.9520e+00, -2.8778e+00, -2.8333e+00,
            -2.7230e+00, -2.6654e+00, -2.5756e+00, -2.3582e+00, -2.0784e+00,
            -1.9280e+00, -2.0034e+00, -2.2833e+00, -2.6398e+00, -2.8369e+00,
            -2.6924e+00, -2.2262e+00, -1.6198e+00, -1.0003e+00, -6.0244e-01,
            -4.1616e-01, -5.2774e-01, -8.2120e-01, -9.4615e-01, -7.9609e-01,
            -5.2003e-01, -2.7678e-01, -2.5812e-01, -4.9523e-01, -8.0640e-01,
            -1.2557e+00, -1.6304e+00, -1.7386e+00, -1.6122e+00, -1.3897e+00,
            -1.1558e+00, -9.5297e-01, -8.3468e-01, -7.0532e-01, -5.5408e-01,
            -3.4968e-01,  4.0400e-03,  3.6773e-01,  6.9866e-01,  1.0183e+00,
            1.2946e+00,  1.6243e+00,  1.9119e+00,  2.0936e+00,  2.1801e+00,
            2.2881e+00,  2.4384e+00,  2.6411e+00,  2.9499e+00,  3.3436e+00,
            3.7697e+00,  4.1322e+00,  4.2284e+00,  4.1329e+00,  3.9734e+00,
            3.8241e+00,  3.7921e+00,  3.8668e+00,  4.0913e+00,  4.4872e+00,
            4.9583e+00,  5.3972e+00,  5.4507e+00,  5.1398e+00,  4.6139e+00,
            4.0555e+00,  3.7859e+00,  3.8277e+00,  4.0100e+00,  4.2250e+00,
            4.2375e+00,  4.1541e+00,  4.0913e+00,  3.9104e+00,  3.6330e+00,
            3.2378e+00,  2.6710e+00,  2.1673e+00,  1.6631e+00,  1.0409e+00,
            5.9041e-01,  3.9675e-01,  4.8207e-01,  6.7567e-01,  9.2406e-01,
            1.1095e+00,  1.1459e+00,  1.0006e+00,  6.8379e-01,  2.1620e-01};*/
    private TableRow downstairsTableRow;
    private TableRow runningTableRow;
    private TableRow standingTableRow;
    private TableRow upstairsTableRow;
    private TableRow walkingTableRow;
    private TableRow elevatorTableRow;
    private TableRow fallingTableRow;
    private TableRow carTableRow;
    private TextToSpeech textToSpeech;
    private float [] init_acc;
    private DataFileWriter dataFileWriter;
    private double currentTime;
    private Quaternion init_q;
    private float[] init_p;
    private float[] current_p;
    private Quaternion current_q;
    private ScatterPlot scatterPlot;
    private LinearLayout mLinearLayout;
    float[][][] inputData_acc;
    float[][][] inputData_gyro;

    private float[] results;
    private HARClassifier classifier;
    private static final float Frequency = 50f;
    private static final float nyquestRate = Frequency / 2;
    private static final float cutoff_low = 0.3f;
    private static final float cutoff_high = 20f;
    private float threshold = 0.101f;
    private String[] labels = {"Walking", "Upstairs", "Downstairs", "Standing_Sitting", "Running", "Elevator", "Falling", "Car"};
    private boolean isRunning;
    private FloatingActionButton fabButton;
    private static final String FOLDER_NAME = "Navigation_RNN/Main_Activity";
    private static final String[] DATA_FILE_NAMES = {
            "RNN_output"
    };
    private static final String[] DATA_FILE_HEADINGS = {
            "TimeStamp,Qw,Qx,Qy,Qz,PosX,PosY,PosZ,pltX,pltY"
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_graph);
        ax = new ArrayList<>();
        ay = new ArrayList<>();
        az = new ArrayList<>();
        mx = new ArrayList<>();
        my = new ArrayList<>();
        mz = new ArrayList<>();
        gx = new ArrayList<>();
        gy = new ArrayList<>();
        gz = new ArrayList<>();
        ma = new ArrayList<>();
        ml = new ArrayList<>();
        mg = new ArrayList<>();
        tmpx = new ArrayList<>();
        tmpy = new ArrayList<>();
        tmpz = new ArrayList<>();
        init_acc = new float[3];
        rx = new ArrayList<>();
        ry = new ArrayList<>();
        rz = new ArrayList<>();
        rqw = new ArrayList<>();
        rqx = new ArrayList<>();
        rqy = new ArrayList<>();
        rqz = new ArrayList<>();
        fabButton = findViewById(R.id.fab);
        mLinearLayout = findViewById(R.id.linearLayoutGraph);
        totalD = (TextView) findViewById(R.id.TV_totalDistace);
        inputData_acc  = new float[1][N_SAMPLES][3];
        inputData_gyro = new float[1][N_SAMPLES][3];


        init_p = new float[]{0, 0, 0};
        current_p = new float[3];


        scatterPlot = new ScatterPlot("Gyro");
        scatterPlot.addPoint(0, 0); //AM: future update sit value using GPS
        //scatterPlot.addPointM(0, 0); //AM: future update sit value using GPS
        //scatterPlot.addPointC(0, 0); //AM: future update sit value using GPS
        mLinearLayout.addView(scatterPlot.getGraphView(getApplicationContext()));


        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);

        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);

        mMagnetic = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);

        mGyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
        mBodyAcc = mSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);

        classifier = new HARClassifier(getApplicationContext());

        textToSpeech = new TextToSpeech(this, this);
        textToSpeech.setLanguage(Locale.US);

        fabButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            if (!isRunning) {
                createFiles();
                fabButton.setImageDrawable(ContextCompat.getDrawable(MainActivity.this, R.drawable.ic_pause_black_24dp));
                isRunning = true;
                mSensorManager.registerListener(MainActivity.this, mAccelerometer, SensorManager.SENSOR_DELAY_FASTEST);
                mSensorManager.registerListener(MainActivity.this, mMagnetic, SensorManager.SENSOR_DELAY_FASTEST);
                mSensorManager.registerListener(MainActivity.this, mGyroscope, SensorManager.SENSOR_DELAY_FASTEST);
                mSensorManager.registerListener(MainActivity.this, mBodyAcc, SensorManager.SENSOR_DELAY_FASTEST);


            } else {

                isRunning = false;
                mSensorManager.unregisterListener(MainActivity.this, mAccelerometer);
                mSensorManager.unregisterListener(MainActivity.this, mMagnetic);
                mSensorManager.unregisterListener(MainActivity.this, mGyroscope);
                mSensorManager.unregisterListener(MainActivity.this, mBodyAcc);
                fabButton.setImageDrawable(ContextCompat.getDrawable(MainActivity.this, R.drawable.ic_play_arrow_black_24dp));
            }

            }
        });

    }

    @Override
    public void onInit(int status) {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (results == null || results.length == 0) {
                    return;
                }
                float max = -1;
                int idx = -1;
                for (int i = 0; i < results.length; i++) {
                    if (results[i] > max) {
                        idx = i;
                        max = results[i];
                    }
                }

                if (max > 0.50 && idx != prevIdx) {
                    textToSpeech.speak(labels[idx], TextToSpeech.QUEUE_ADD, null,
                            Integer.toString(new Random().nextInt()));
                    prevIdx = idx;
                }
            }
        }, 1000, 3000);
    }

    protected void onResume() {
        super.onResume();
        /*getSensorManager().registerListener(this, getSensorManager().getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_FASTEST);
        //getSensorManager().registerListener(this, getSensorManager().getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION), SensorManager.SENSOR_DELAY_FASTEST );
        getSensorManager().registerListener(this, getSensorManager().getDefaultSensor(Sensor.TYPE_GYROSCOPE), SensorManager.SENSOR_DELAY_FASTEST);
        getSensorManager().registerListener(this, getSensorManager().getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD), SensorManager.SENSOR_DELAY_FASTEST);
*/
    }
    protected void onStop() {
        super.onStop();
        mSensorManager.unregisterListener(MainActivity.this, mAccelerometer);
        mSensorManager.unregisterListener(MainActivity.this, mMagnetic);
        mSensorManager.unregisterListener(MainActivity.this, mGyroscope);
        mSensorManager.unregisterListener(MainActivity.this, mBodyAcc);

    }

    @Override
    public void onDestroy() {
        if (textToSpeech != null) {
            textToSpeech.stop();
            textToSpeech.shutdown();
        }
        super.onDestroy();
    }

    @Override
    public void onSensorChanged(SensorEvent event) {

        activityPrediction();

        Sensor sensor = event.sensor;
        if (sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            /*ax.add(event.values[0]);
            ay.add(event.values[1]);
            az.add(event.values[2]);
            currentTime = ExtraFunctions.nsToSec(event.timestamp);
            if(!first_run)
                stride_acc++;*/
            if (mx.size() > 100)
                init_acc = event.values;

        } else if (sensor.getType() == Sensor.TYPE_GYROSCOPE) {
            gx.add(event.values[0]);
            gy.add(event.values[1]);
            gz.add(event.values[2]);
            currentTime = ExtraFunctions.nsToSec(event.timestamp);
            if(!first_run)
                stride_gyro++;

        } else if (sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {
            mx.add(event.values[0]);
            my.add(event.values[1]);
            mz.add(event.values[2]);
            currentTime = ExtraFunctions.nsToSec(event.timestamp);
        } else if (sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION) {
            ax.add(event.values[0] / 9.81f);
            ay.add(event.values[1] / 9.81f);
            az.add(event.values[2] / 9.81f);
            currentTime = ExtraFunctions.nsToSec(event.timestamp);
            if(!first_run)
                stride_acc++;
        }
       /* int a = 0;
        for (int i =0; i<test_accx.length;i++)
        {
            if (i == 492)
                a = 1;
            gx.add((float) test_accx[i]);
            gy.add((float) test_accy[i]);
            gz.add((float) test_accz[i]);
            ax.add((float) test_gyrox[i]);
            ay.add((float) test_gyroy[i]);
            az.add((float) test_gyroz[i]);
            currentTime = 0;
            if(!first_run) {
                stride_acc++;
                stride_gyro++;
            }
            activityPrediction();
        }*/
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int i) {

    }

    private void activityPrediction() {

        if ((first_run && (ax.size() >= N_SAMPLES) && (gx.size() >= N_SAMPLES)) || (!first_run && stride_acc >= stride && stride_gyro >= stride)) {
            if (first_run) {
                for (int i = 0; i < N_SAMPLES; i++) {
                    inputData_acc[0][i][0] = ax.get(i);
                    inputData_acc[0][i][1] = ay.get(i);
                    inputData_acc[0][i][2] = az.get(i);

                    inputData_gyro[0][i][0] = gx.get(i);
                    inputData_gyro[0][i][1] = gy.get(i);
                    inputData_gyro[0][i][2] = gz.get(i);


                }
                init_q = getOrientationVectorFromAccelerationMagnetic(new float[]{init_acc[0],init_acc[1],init_acc[2]},
                        new float[]{mx.get(mx.size() - 100), my.get(my.size() - 100), mz.get(mz.size() - 100)});
                float [] initial_q = new float[]{(float) init_q.getQ0(), (float) init_q.getQ1(), (float) init_q.getQ2(), (float) init_q.getQ3()};
                dataFileWriter.writeToFile("RNN_output", "init_Heading: " + Arrays.toString(initial_q));
                //init_q = new Quaternion(1.0f,0.0f,0.0f,0f);
                first_run = false;
                current_q = init_q;
                current_p[0] = 0;
                current_p[1] = 0;
                current_p[2] = 0;
            }
            else {
                for (int i = 0; i < stride; i++) {
                    inputData_acc[0][N_SAMPLES-stride+i][0] = ax.get(i);
                    inputData_acc[0][N_SAMPLES-stride+i][1] = ay.get(i);
                    inputData_acc[0][N_SAMPLES-stride+i][2] = az.get(i);

                    inputData_gyro[0][N_SAMPLES-stride+i][0] = gx.get(i);
                    inputData_gyro[0][N_SAMPLES-stride+i][1] = gy.get(i);
                    inputData_gyro[0][N_SAMPLES-stride+i][2] = gz.get(i);
                }
            }
            long t = System.nanoTime();
            Object[] inputs = {inputData_acc, inputData_gyro};
            classifier.predictProbabilities(inputs);
            float[][] parsedOutput0 = classifier.getDisplacment();
            float[][] parsedOutput1 = classifier.getQuaternion();
            /*rx.add(parsedOutput0[0][0]);
            ry.add(parsedOutput0[0][1]);
            rz.add(parsedOutput0[0][2]);

            rqw.add(parsedOutput1[0][0]);
            rqx.add(parsedOutput1[0][1]);
            rqy.add(parsedOutput1[0][2]);
            rqz.add(parsedOutput1[0][3]);*/

// ... do some work A ...
// ... do some work B ...
// ... do some work C ...
            //if(!(Math.abs(parsedOutput0[0][0]) < Math.abs(threshold) && Math.abs(parsedOutput0[0][1]) < Math.abs(threshold)))
            //{
            RealVector y_data_p = new ArrayRealVector(new double[]{parsedOutput0[0][0],parsedOutput0[0][1],parsedOutput0[0][2]}, false);
            RealMatrix rotation_matrix =  new Array2DRowRealMatrix(getRotationMatrix(new double[]{current_q.getQ0(),current_q.getQ1(),current_q.getQ2(),current_q.getQ3()}), false);
            //{parsedOutput1[0][0],parsedOutput1[0][1],parsedOutput1[0][2],parsedOutput1[0][3]}
            RealVector rotated_pos = rotation_matrix.operate(y_data_p);
            double [] pos_data = rotated_pos.toArray();
            totalDistance = (float) (totalDistance + Math.sqrt(pos_data[0] * pos_data[0] + pos_data[2] * pos_data[2] + pos_data[1] * pos_data[1]));
            current_p[0] = current_p[0] + (float) pos_data[0];
            current_p[1] = current_p[1] + (float) pos_data[1];
            current_p[2] = current_p[2] + (float) pos_data[2];
            Quaternion new_q = new Quaternion(parsedOutput1[0][0],parsedOutput1[0][1],parsedOutput1[0][2],parsedOutput1[0][3]);
            new_q = new_q.normalize();
            current_q = current_q.multiply(new_q);


            float oPointX = scatterPlot.getLastYPoint();
            float oPointY = -scatterPlot.getLastXPoint();


            //rotating points by 90 degrees, so north is up
            float rPointX = -current_p[0];
            float rPointY = -current_p[1];

            scatterPlot.addPoint(rPointX, rPointY);
            mLinearLayout.removeAllViews();
            mLinearLayout.addView(scatterPlot.getGraphView(getApplicationContext()));
            totalD.setText(String.format("%.2f",totalDistance));
            t = System.nanoTime() / 1000000;

            dataFileWriter.writeToFile("RNN_output",
                    (float)t,
                    (float)current_q.getQ0(),
                    (float)current_q.getQ1(),
                    (float)current_q.getQ2(),
                    (float)current_q.getQ3(),
                    current_p[0],
                    current_p[1],
                    current_p[2],
                    rPointX,
                    rPointY);

            ax.clear();
            ay.clear();
            az.clear();
            gx.clear();
            gy.clear();
            gz.clear();
            ma.clear();
            ml.clear();
            mg.clear();
            mx.clear();
            my.clear();
            mz.clear();
            stride_gyro =0;
            stride_acc=0;
            for (int i = 0; i < (N_SAMPLES - stride); i++) {
                inputData_acc[0][i][0] = inputData_acc[0][stride+i][0];
                inputData_acc[0][i][1] = inputData_acc[0][stride+i][1];
                inputData_acc[0][i][2] = inputData_acc[0][stride+i][2];

                inputData_gyro[0][i][0] = inputData_gyro[0][stride+i][0];
                inputData_gyro[0][i][1] = inputData_gyro[0][stride+i][1];
                inputData_gyro[0][i][2] = inputData_gyro[0][stride+i][2];
            }

        }
    }

    private void setProbabilities() {
        walkingTextView.setText(Float.toString(round(results[0], 2)));
        upstairsTextView.setText(Float.toString(round(results[1], 2)));
        downstairsTextView.setText(Float.toString(round(results[2], 2)));
        standingTextView.setText(Float.toString(round(results[3], 2)));
        runningTextView.setText(Float.toString(round(results[4], 2)));
        elevatorTextView.setText(Float.toString(round(results[5], 2)));
        fallingTextView.setText(Float.toString(round(results[6], 2)));
        carTextView.setText(Float.toString(round(results[7], 2)));

    }

    /*private void setRowsColor(int idx) {
        downstairsTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        runningTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        standingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        upstairsTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        walkingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        elevatorTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        fallingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));
        carTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorTransparent, null));

        if (idx == 0)
            walkingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 1)
            upstairsTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 2)
            downstairsTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 3)
            standingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 4)
            runningTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 5)
            elevatorTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 6)
            fallingTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
        else if (idx == 7)
            carTableRow.setBackgroundColor(ResourcesCompat.getColor(getResources(), R.color.colorBlue, null));
    }*/

    private float[] toFloatArray(List<Float> list) {
        int i = 0;
        float[] array = new float[list.size()];

        for (Float f : list) {
            array[i++] = (f != null ? f : Float.NaN);
        }
        return array;
    }

    private static float round(float d, int decimalPlace) {
        BigDecimal bd = new BigDecimal(Float.toString(d));
        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
        return bd.floatValue();
    }

    private SensorManager getSensorManager() {
        return (SensorManager) getSystemService(SENSOR_SERVICE);
    }

    public static Quaternion getOrientationVectorFromAccelerationMagnetic(float[] acceleration, float[] magnetic) {
        float[] rotationMatrix = new float[9];
        if (SensorManager.getRotationMatrix(rotationMatrix, null, acceleration, magnetic)) {
            double[] rotation = getQuaternion(new Matrix3f(rotationMatrix));
            return new Quaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
        }

        return null;
    }

    private static double[] getQuaternion(Matrix3f m1) {
        double w = Math.sqrt(1.0 + m1.get(0,0) + m1.get(1,1) + m1.get(2,2)) / 2.0;
        double w4 = (4.0 * w);
        double x = (m1.get(2,1) - m1.get(1,2)) / w4 ;
        double y = (m1.get(0,2) - m1.get(2,0)) / w4 ;
        double z = (m1.get(1,0) - m1.get(0,1)) / w4 ;

        return new double[]{w,x,y,z};
    }

    private static double[][] getRotationMatrix(double[] quaternionVector) {
        double[][] rotationMatrix = {{1 - 2 * (Math.pow(quaternionVector[2], 2) + Math.pow(quaternionVector[3], 2)),
                2 * (quaternionVector[1] * quaternionVector[2] - quaternionVector[0] * quaternionVector[3]),
                2 * (quaternionVector[1] * quaternionVector[3] + quaternionVector[0] * quaternionVector[2])},
                {2 * (quaternionVector[1] * quaternionVector[2] + quaternionVector[0] * quaternionVector[3]),
                        1 - 2 * (Math.pow(quaternionVector[1], 2) + Math.pow(quaternionVector[3], 2)),
                        2 * (quaternionVector[2] * quaternionVector[3] - quaternionVector[0] * quaternionVector[1])},
                {2 * (quaternionVector[1] * quaternionVector[3] - quaternionVector[0] * quaternionVector[2]),
                        2 * (quaternionVector[2] * quaternionVector[3] + quaternionVector[0] * quaternionVector[1]),
                        1 - 2 * (Math.pow(quaternionVector[1], 2) + Math.pow(quaternionVector[2], 2))}};
        return rotationMatrix;
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode){
            case 0:
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(MainActivity.this, "Thank you for providing permission!", Toast.LENGTH_SHORT).show();
                    finish();
                } else {
                    Toast.makeText(MainActivity.this, "Need location permission to create tour.", Toast.LENGTH_LONG).show();
                    finish();
                }
                break;
        }
    }
    private void createFiles() {
        if (!areFilesCreated) {
            try {
                dataFileWriter = new DataFileWriter(FOLDER_NAME, DATA_FILE_NAMES, DATA_FILE_HEADINGS);
            } catch (IOException e) {
                Log.e("GraphActivity", e.toString());
            }
            areFilesCreated = true;
        }
    }
}